@page "/admin/apps"
@using app.domain.Models.ExternalAppAggregate
@attribute [Authorize]
@attribute [StreamRendering]
@layout AdminLayout
@inject IExternalAppService ExternalAppService

<PageTitle>Admin | External Applications</PageTitle>

<div class="flex justify-between items-center">
    <h1 class="heading heading-1">Applications</h1>
    <a href="/admin/apps/register" data-enhance-nav="false" class="btn btn-secondary cursor-pointer">
        <i class="fa-regular fa-square-plus"></i>
        Register a New Application
    </a>
</div>

@if (_isLoading)
{
    <p>Loading ...</p>
}
else
{
    @if (!string.IsNullOrWhiteSpace(_errorMessage))
    {
        <p class="text-red-600 bg-red-100 p-4 rounded-md border border-red-300">@_errorMessage</p>
    }
    else
    {
        <table class="w-full">
            <thead class="bg-primary">
                <th class="text-left p-2 text-white">Applications Name</th>
                <th class="text-left p-2 text-white">Applications Id</th>
                @* <th class="text-left p-2 text-white">Actions</th> *@
            </thead>
            <tbody class="bg-slate-100">
                @foreach (var item in _applications.Items)
                {
                    <tr class="border-b-white border-b-2">
                        <td class="p-2">@item.ClientName</td>
                        <td class="p-2">@item.ClientId</td>
                        @* <td class="p-2">
                            <a data-enhance-nav="false" class="text-secondary" href="/admin/events/@item.Id"><i
                                    class="fa-solid fa-pen-to-square"></i></a>
                            <a data-enhance-nav="false" class="text-secondary ml-4" href="/admin/events/delete/@item.Id"><i
                                    class="fa-solid fa-trash-can"></i></a>
                        </td> *@
                    </tr>
                }
            </tbody>
        </table>
    }
}

<div class="flex justify-between items-center mt-4">
    <div class="flex gap-4 items-center">
        <!-- Pagination -->
        <p>Page @Page / @_applications.TotalPages</p>

        @if (_applications.HasPreviousPage)
        {
            <a data-enhance-nav="false" href="/admin/apps?Page=@(Page - 1)" class="link link-secondary"
                target="_parent">Previous</a>
        }
        @if (_applications.HasNextPage)
        {
            <a data-enhance-nav="false" href="/admin/apps?Page=@(Page + 1)" class="link link-secondary"
                target="_parent">Next</a>
        }
    </div>
</div>

@code {
    private const int DefaultPage = 1;
    private const int DefaultPageSize = 5;

    [SupplyParameterFromQuery]
    public int Page { get; set; }

    [SupplyParameterFromQuery]
    public int Size { get; set; }

    private string _errorMessage = string.Empty;
    private bool _isLoading;
    private PagedList<Application> _applications = PagedList.Empty<Application>();

    protected override async Task OnInitializedAsync()
    {
        Page = Page == 0 ? DefaultPage : Page;
        Size = Size == 0 ? DefaultPageSize : Size;
        _isLoading = true;
        ErrorOr<PagedList<Application>> appsResult = default;
        appsResult = await ExternalAppService.GetAllAsync(Page, Size);
        if (appsResult.IsError)
        {
            _errorMessage = string.Join("\n", appsResult.Errors.Select(e => e.Description));
            _isLoading = false;
            return;
        }

        _applications = appsResult.Value;
        _isLoading = false;
    }
}
