@page "/admin"
@attribute [Authorize(Policy = Policies.AdminOnly)]
@layout AdminLayout
@inject IEventService EventService
@inject NavigationManager NavigationManager
@attribute [StreamRendering]

<PageTitle>Admin | Events</PageTitle>
<div class="flex justify-between items-center">
    <h1 class="heading heading-1">Events</h1>
    <div class="flex gap-4">
        @* <EditForm class="flex gap-2 items-center" OnValidSubmit="@HandlePageSize" Model="@SizeModel" FormName="PageSizeForm">
            <!-- Page Size selector -->
            <p>Page Size</p>
            <InputSelect @bind-Value="@SizeModel.Size">
                <option value="5">5</option>
                <option value="10">10</option>
                <option value="20">20</option>
                <option value="50">50</option>
                <option value="100">100</option>
            </InputSelect>
            <button type="submit" class="btn btn-secondary">Apply Page Size</button>
        </EditForm> *@
        <EditForm class="flex gap-1" OnValidSubmit="@HandleSearch" Model="@SearchBarModel" FormName="SearchForm">
            <label for="search-input" class="flex items-center px-4 gap-1 border border-gray-400 rounded-lg">
                <InputText class="p-2 w-full" id="search-input" @bind-Value="@SearchBarModel.Text" title="text" required
                    type="text" placeholder="Search" />
            </label>
            <button class="btn btn-secondary center" type="submit">
                <i class="fa-solid fa-magnifying-glass"></i>
            </button>
        </EditForm>
    </div>
</div>

@if (_isLoading)
{
    <p>Loading ...</p>
}
else
{
    @if (!string.IsNullOrWhiteSpace(_errorMessage))
    {
        <p>@_errorMessage</p>
    }
    else
    {
        <table class="w-full">
    <thead class="bg-primary">
        <th class="text-left p-2 text-white">Date</th>
        <th class="text-left p-2 text-white">Event Name</th>
        <th class="text-left p-2 text-white">Status</th>
        <th class="text-left p-2 text-white">Actions</th>
    </thead>
    <tbody class="bg-slate-100">
        @foreach (var item in _events.Items)
                {
                    <tr class="border-b-white border-b-2">
                        <td class="p-2">@item.Schedule.ToFriendlyDateString()</td>
                        <td class="p-2">@item.Title</td>
                        <td class="p-2">@item.Status</td>
                        <td class="p-2">
                            <a data-enhance-nav="false" class="text-secondary" href="/admin/events/@item.Id"><i
                                    class="fa-solid fa-pen-to-square"></i></a>
                            <a data-enhance-nav="false" class="text-secondary ml-4" href="/admin/events/delete/@item.Id"><i
                                    class="fa-solid fa-trash-can"></i></a>
                        </td>
                    </tr>
                }
            </tbody>
        </table>
    }
}

<div class="flex justify-between items-center mt-4">
    <a data-enhance-nav="false" href="/admin/events" class="btn btn-secondary cursor-pointer"><i
            class="fa-regular fa-square-plus"></i> New event</a>
    <div class="flex gap-4 items-center">
        <!-- Pagination -->
        <p>Page @Page / @_events.TotalPages</p>

        @if (_events.HasPreviousPage)
        {
            <a data-enhance-nav="false" href="/admin?Page=@(Page - 1)" class="link link-secondary"
                target="_parent">Previous</a>
        }
        @if (_events.HasNextPage)
        {
            <a data-enhance-nav="false" href="/admin?Page=@(Page + 1)" class="link link-secondary" target="_parent">Next</a>
        }
    </div>
</div>

@code {
    private const int DefaultPage = 1;
    private const int DefaultPageSize = 5;

    [SupplyParameterFromQuery]
    public int Page { get; set; }

    [SupplyParameterFromQuery]
    public int Size { get; set; }

    [SupplyParameterFromQuery]
    public string Search { get; set; } = string.Empty;

    [SupplyParameterFromForm(FormName = "SearchForm")]
    private SearchModel SearchBarModel { get; set; } = new();

    [SupplyParameterFromForm(FormName = "PageSizeForm")]
    private PageSizeModel SizeModel { get; set; } = new();

    private string _errorMessage = string.Empty;
    private bool _isLoading;
    private PagedList<Event> _events = PagedList.Empty<Event>();

    protected override async Task OnInitializedAsync()
    {
        Page = Page == 0 ? DefaultPage : Page;
        Size = Size == 0 ? DefaultPageSize : Size;
        SizeModel.Size = Size.ToString();
        SearchBarModel.Text = Search;
        _isLoading = true;
        ErrorOr<PagedList<Event>> eventsResult = default;
        if (string.IsNullOrWhiteSpace(Search))
        {
            eventsResult = await EventService.GetAllAsync(Page, Size);
        }
        else
        {
            eventsResult = await EventService.SearchAsync(e => e.Title.Contains(Search), Page, Size);
        }
        if (eventsResult.IsError)
        {
            _errorMessage = string.Join("\n", eventsResult.Errors.Select(e => e.Description));
            _isLoading = false;
            return;
        }

        _events = eventsResult.Value;
        _isLoading = false;
    }

    private void HandleSearch()
    {
        Console.WriteLine(SearchBarModel.Text);
        var path = NavigationManager.ToBaseRelativePath(NavigationManager.Uri);
        var newPath = NavigationManager.GetUriWithQueryParameters(path, new Dictionary<string, object?>
{
{ "Search", SearchBarModel.Text }
});

        NavigationManager.NavigateTo($"/{newPath}", true);
    }

    private void HandlePageSize()
    {
        Console.WriteLine(SizeModel.Size);
    }

    class SearchModel
    {
        public string Text { get; set; } = string.Empty;
    }

    class PageSizeModel
    {
        public string Size { get; set; } = string.Empty;
    }
}
